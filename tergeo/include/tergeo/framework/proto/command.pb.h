// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tergeo/framework/proto/command.proto

#ifndef PROTOBUF_tergeo_2fframework_2fproto_2fcommand_2eproto__INCLUDED
#define PROTOBUF_tergeo_2fframework_2fproto_2fcommand_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tergeo {
namespace framework {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tergeo_2fframework_2fproto_2fcommand_2eproto();
void protobuf_AssignDesc_tergeo_2fframework_2fproto_2fcommand_2eproto();
void protobuf_ShutdownFile_tergeo_2fframework_2fproto_2fcommand_2eproto();

class DrivingCommand;

// ===================================================================

class DrivingCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tergeo.framework.proto.DrivingCommand) */ {
 public:
  DrivingCommand();
  virtual ~DrivingCommand();

  DrivingCommand(const DrivingCommand& from);

  inline DrivingCommand& operator=(const DrivingCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DrivingCommand& default_instance();

  void Swap(DrivingCommand* other);

  // implements Message ----------------------------------------------

  inline DrivingCommand* New() const { return New(NULL); }

  DrivingCommand* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DrivingCommand& from);
  void MergeFrom(const DrivingCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DrivingCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool enable = 1;
  bool has_enable() const;
  void clear_enable();
  static const int kEnableFieldNumber = 1;
  bool enable() const;
  void set_enable(bool value);

  // optional bool enable_brake = 2;
  bool has_enable_brake() const;
  void clear_enable_brake();
  static const int kEnableBrakeFieldNumber = 2;
  bool enable_brake() const;
  void set_enable_brake(bool value);

  // optional float keep_time_s = 3;
  bool has_keep_time_s() const;
  void clear_keep_time_s();
  static const int kKeepTimeSFieldNumber = 3;
  float keep_time_s() const;
  void set_keep_time_s(float value);

  // optional float speed_mps = 4;
  bool has_speed_mps() const;
  void clear_speed_mps();
  static const int kSpeedMpsFieldNumber = 4;
  float speed_mps() const;
  void set_speed_mps(float value);

  // optional float omega_radps = 5;
  bool has_omega_radps() const;
  void clear_omega_radps();
  static const int kOmegaRadpsFieldNumber = 5;
  float omega_radps() const;
  void set_omega_radps(float value);

  // @@protoc_insertion_point(class_scope:tergeo.framework.proto.DrivingCommand)
 private:
  inline void set_has_enable();
  inline void clear_has_enable();
  inline void set_has_enable_brake();
  inline void clear_has_enable_brake();
  inline void set_has_keep_time_s();
  inline void clear_has_keep_time_s();
  inline void set_has_speed_mps();
  inline void clear_has_speed_mps();
  inline void set_has_omega_radps();
  inline void clear_has_omega_radps();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool enable_;
  bool enable_brake_;
  float keep_time_s_;
  float speed_mps_;
  float omega_radps_;
  friend void  protobuf_AddDesc_tergeo_2fframework_2fproto_2fcommand_2eproto();
  friend void protobuf_AssignDesc_tergeo_2fframework_2fproto_2fcommand_2eproto();
  friend void protobuf_ShutdownFile_tergeo_2fframework_2fproto_2fcommand_2eproto();

  void InitAsDefaultInstance();
  static DrivingCommand* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DrivingCommand

// optional bool enable = 1;
inline bool DrivingCommand::has_enable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DrivingCommand::set_has_enable() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DrivingCommand::clear_has_enable() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DrivingCommand::clear_enable() {
  enable_ = false;
  clear_has_enable();
}
inline bool DrivingCommand::enable() const {
  // @@protoc_insertion_point(field_get:tergeo.framework.proto.DrivingCommand.enable)
  return enable_;
}
inline void DrivingCommand::set_enable(bool value) {
  set_has_enable();
  enable_ = value;
  // @@protoc_insertion_point(field_set:tergeo.framework.proto.DrivingCommand.enable)
}

// optional bool enable_brake = 2;
inline bool DrivingCommand::has_enable_brake() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DrivingCommand::set_has_enable_brake() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DrivingCommand::clear_has_enable_brake() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DrivingCommand::clear_enable_brake() {
  enable_brake_ = false;
  clear_has_enable_brake();
}
inline bool DrivingCommand::enable_brake() const {
  // @@protoc_insertion_point(field_get:tergeo.framework.proto.DrivingCommand.enable_brake)
  return enable_brake_;
}
inline void DrivingCommand::set_enable_brake(bool value) {
  set_has_enable_brake();
  enable_brake_ = value;
  // @@protoc_insertion_point(field_set:tergeo.framework.proto.DrivingCommand.enable_brake)
}

// optional float keep_time_s = 3;
inline bool DrivingCommand::has_keep_time_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DrivingCommand::set_has_keep_time_s() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DrivingCommand::clear_has_keep_time_s() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DrivingCommand::clear_keep_time_s() {
  keep_time_s_ = 0;
  clear_has_keep_time_s();
}
inline float DrivingCommand::keep_time_s() const {
  // @@protoc_insertion_point(field_get:tergeo.framework.proto.DrivingCommand.keep_time_s)
  return keep_time_s_;
}
inline void DrivingCommand::set_keep_time_s(float value) {
  set_has_keep_time_s();
  keep_time_s_ = value;
  // @@protoc_insertion_point(field_set:tergeo.framework.proto.DrivingCommand.keep_time_s)
}

// optional float speed_mps = 4;
inline bool DrivingCommand::has_speed_mps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DrivingCommand::set_has_speed_mps() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DrivingCommand::clear_has_speed_mps() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DrivingCommand::clear_speed_mps() {
  speed_mps_ = 0;
  clear_has_speed_mps();
}
inline float DrivingCommand::speed_mps() const {
  // @@protoc_insertion_point(field_get:tergeo.framework.proto.DrivingCommand.speed_mps)
  return speed_mps_;
}
inline void DrivingCommand::set_speed_mps(float value) {
  set_has_speed_mps();
  speed_mps_ = value;
  // @@protoc_insertion_point(field_set:tergeo.framework.proto.DrivingCommand.speed_mps)
}

// optional float omega_radps = 5;
inline bool DrivingCommand::has_omega_radps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DrivingCommand::set_has_omega_radps() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DrivingCommand::clear_has_omega_radps() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DrivingCommand::clear_omega_radps() {
  omega_radps_ = 0;
  clear_has_omega_radps();
}
inline float DrivingCommand::omega_radps() const {
  // @@protoc_insertion_point(field_get:tergeo.framework.proto.DrivingCommand.omega_radps)
  return omega_radps_;
}
inline void DrivingCommand::set_omega_radps(float value) {
  set_has_omega_radps();
  omega_radps_ = value;
  // @@protoc_insertion_point(field_set:tergeo.framework.proto.DrivingCommand.omega_radps)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace framework
}  // namespace tergeo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tergeo_2fframework_2fproto_2fcommand_2eproto__INCLUDED
