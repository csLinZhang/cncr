// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tergeo/map/proto/geometry.proto

#ifndef PROTOBUF_tergeo_2fmap_2fproto_2fgeometry_2eproto__INCLUDED
#define PROTOBUF_tergeo_2fmap_2fproto_2fgeometry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tergeo {
namespace map {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tergeo_2fmap_2fproto_2fgeometry_2eproto();
void protobuf_AssignDesc_tergeo_2fmap_2fproto_2fgeometry_2eproto();
void protobuf_ShutdownFile_tergeo_2fmap_2fproto_2fgeometry_2eproto();

class Line;
class Point2d;
class Polygon;
class Polyline;

enum Polygon_Type {
  Polygon_Type_INCLUDE = 0,
  Polygon_Type_EXCLUDE = 1
};
bool Polygon_Type_IsValid(int value);
const Polygon_Type Polygon_Type_Type_MIN = Polygon_Type_INCLUDE;
const Polygon_Type Polygon_Type_Type_MAX = Polygon_Type_EXCLUDE;
const int Polygon_Type_Type_ARRAYSIZE = Polygon_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Polygon_Type_descriptor();
inline const ::std::string& Polygon_Type_Name(Polygon_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Polygon_Type_descriptor(), value);
}
inline bool Polygon_Type_Parse(
    const ::std::string& name, Polygon_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Polygon_Type>(
    Polygon_Type_descriptor(), name, value);
}
// ===================================================================

class Point2d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tergeo.map.proto.Point2d) */ {
 public:
  Point2d();
  virtual ~Point2d();

  Point2d(const Point2d& from);

  inline Point2d& operator=(const Point2d& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point2d& default_instance();

  void Swap(Point2d* other);

  // implements Message ----------------------------------------------

  inline Point2d* New() const { return New(NULL); }

  Point2d* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point2d& from);
  void MergeFrom(const Point2d& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Point2d* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:tergeo.map.proto.Point2d)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  friend void  protobuf_AddDesc_tergeo_2fmap_2fproto_2fgeometry_2eproto();
  friend void protobuf_AssignDesc_tergeo_2fmap_2fproto_2fgeometry_2eproto();
  friend void protobuf_ShutdownFile_tergeo_2fmap_2fproto_2fgeometry_2eproto();

  void InitAsDefaultInstance();
  static Point2d* default_instance_;
};
// -------------------------------------------------------------------

class Line : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tergeo.map.proto.Line) */ {
 public:
  Line();
  virtual ~Line();

  Line(const Line& from);

  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Line& default_instance();

  void Swap(Line* other);

  // implements Message ----------------------------------------------

  inline Line* New() const { return New(NULL); }

  Line* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Line& from);
  void MergeFrom(const Line& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Line* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tergeo.map.proto.Point2d start_point = 1;
  bool has_start_point() const;
  void clear_start_point();
  static const int kStartPointFieldNumber = 1;
  const ::tergeo::map::proto::Point2d& start_point() const;
  ::tergeo::map::proto::Point2d* mutable_start_point();
  ::tergeo::map::proto::Point2d* release_start_point();
  void set_allocated_start_point(::tergeo::map::proto::Point2d* start_point);

  // optional .tergeo.map.proto.Point2d end_point = 2;
  bool has_end_point() const;
  void clear_end_point();
  static const int kEndPointFieldNumber = 2;
  const ::tergeo::map::proto::Point2d& end_point() const;
  ::tergeo::map::proto::Point2d* mutable_end_point();
  ::tergeo::map::proto::Point2d* release_end_point();
  void set_allocated_end_point(::tergeo::map::proto::Point2d* end_point);

  // @@protoc_insertion_point(class_scope:tergeo.map.proto.Line)
 private:
  inline void set_has_start_point();
  inline void clear_has_start_point();
  inline void set_has_end_point();
  inline void clear_has_end_point();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::tergeo::map::proto::Point2d* start_point_;
  ::tergeo::map::proto::Point2d* end_point_;
  friend void  protobuf_AddDesc_tergeo_2fmap_2fproto_2fgeometry_2eproto();
  friend void protobuf_AssignDesc_tergeo_2fmap_2fproto_2fgeometry_2eproto();
  friend void protobuf_ShutdownFile_tergeo_2fmap_2fproto_2fgeometry_2eproto();

  void InitAsDefaultInstance();
  static Line* default_instance_;
};
// -------------------------------------------------------------------

class Polyline : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tergeo.map.proto.Polyline) */ {
 public:
  Polyline();
  virtual ~Polyline();

  Polyline(const Polyline& from);

  inline Polyline& operator=(const Polyline& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Polyline& default_instance();

  void Swap(Polyline* other);

  // implements Message ----------------------------------------------

  inline Polyline* New() const { return New(NULL); }

  Polyline* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Polyline& from);
  void MergeFrom(const Polyline& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Polyline* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tergeo.map.proto.Point2d point = 1;
  int point_size() const;
  void clear_point();
  static const int kPointFieldNumber = 1;
  const ::tergeo::map::proto::Point2d& point(int index) const;
  ::tergeo::map::proto::Point2d* mutable_point(int index);
  ::tergeo::map::proto::Point2d* add_point();
  ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Point2d >*
      mutable_point();
  const ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Point2d >&
      point() const;

  // @@protoc_insertion_point(class_scope:tergeo.map.proto.Polyline)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Point2d > point_;
  friend void  protobuf_AddDesc_tergeo_2fmap_2fproto_2fgeometry_2eproto();
  friend void protobuf_AssignDesc_tergeo_2fmap_2fproto_2fgeometry_2eproto();
  friend void protobuf_ShutdownFile_tergeo_2fmap_2fproto_2fgeometry_2eproto();

  void InitAsDefaultInstance();
  static Polyline* default_instance_;
};
// -------------------------------------------------------------------

class Polygon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tergeo.map.proto.Polygon) */ {
 public:
  Polygon();
  virtual ~Polygon();

  Polygon(const Polygon& from);

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Polygon& default_instance();

  void Swap(Polygon* other);

  // implements Message ----------------------------------------------

  inline Polygon* New() const { return New(NULL); }

  Polygon* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Polygon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Polygon_Type Type;
  static const Type INCLUDE =
    Polygon_Type_INCLUDE;
  static const Type EXCLUDE =
    Polygon_Type_EXCLUDE;
  static inline bool Type_IsValid(int value) {
    return Polygon_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Polygon_Type_Type_MIN;
  static const Type Type_MAX =
    Polygon_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Polygon_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Polygon_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Polygon_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Polygon_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .tergeo.map.proto.Polygon.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::tergeo::map::proto::Polygon_Type type() const;
  void set_type(::tergeo::map::proto::Polygon_Type value);

  // repeated .tergeo.map.proto.Point2d point = 2;
  int point_size() const;
  void clear_point();
  static const int kPointFieldNumber = 2;
  const ::tergeo::map::proto::Point2d& point(int index) const;
  ::tergeo::map::proto::Point2d* mutable_point(int index);
  ::tergeo::map::proto::Point2d* add_point();
  ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Point2d >*
      mutable_point();
  const ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Point2d >&
      point() const;

  // @@protoc_insertion_point(class_scope:tergeo.map.proto.Polygon)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Point2d > point_;
  int type_;
  friend void  protobuf_AddDesc_tergeo_2fmap_2fproto_2fgeometry_2eproto();
  friend void protobuf_AssignDesc_tergeo_2fmap_2fproto_2fgeometry_2eproto();
  friend void protobuf_ShutdownFile_tergeo_2fmap_2fproto_2fgeometry_2eproto();

  void InitAsDefaultInstance();
  static Polygon* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Point2d

// optional double x = 1;
inline bool Point2d::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point2d::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point2d::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point2d::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Point2d::x() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Point2d.x)
  return x_;
}
inline void Point2d::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:tergeo.map.proto.Point2d.x)
}

// optional double y = 2;
inline bool Point2d::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point2d::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point2d::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point2d::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Point2d::y() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Point2d.y)
  return y_;
}
inline void Point2d::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:tergeo.map.proto.Point2d.y)
}

// -------------------------------------------------------------------

// Line

// optional .tergeo.map.proto.Point2d start_point = 1;
inline bool Line::has_start_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Line::set_has_start_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Line::clear_has_start_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Line::clear_start_point() {
  if (start_point_ != NULL) start_point_->::tergeo::map::proto::Point2d::Clear();
  clear_has_start_point();
}
inline const ::tergeo::map::proto::Point2d& Line::start_point() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Line.start_point)
  return start_point_ != NULL ? *start_point_ : *default_instance_->start_point_;
}
inline ::tergeo::map::proto::Point2d* Line::mutable_start_point() {
  set_has_start_point();
  if (start_point_ == NULL) {
    start_point_ = new ::tergeo::map::proto::Point2d;
  }
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.Line.start_point)
  return start_point_;
}
inline ::tergeo::map::proto::Point2d* Line::release_start_point() {
  // @@protoc_insertion_point(field_release:tergeo.map.proto.Line.start_point)
  clear_has_start_point();
  ::tergeo::map::proto::Point2d* temp = start_point_;
  start_point_ = NULL;
  return temp;
}
inline void Line::set_allocated_start_point(::tergeo::map::proto::Point2d* start_point) {
  delete start_point_;
  start_point_ = start_point;
  if (start_point) {
    set_has_start_point();
  } else {
    clear_has_start_point();
  }
  // @@protoc_insertion_point(field_set_allocated:tergeo.map.proto.Line.start_point)
}

// optional .tergeo.map.proto.Point2d end_point = 2;
inline bool Line::has_end_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Line::set_has_end_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Line::clear_has_end_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Line::clear_end_point() {
  if (end_point_ != NULL) end_point_->::tergeo::map::proto::Point2d::Clear();
  clear_has_end_point();
}
inline const ::tergeo::map::proto::Point2d& Line::end_point() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Line.end_point)
  return end_point_ != NULL ? *end_point_ : *default_instance_->end_point_;
}
inline ::tergeo::map::proto::Point2d* Line::mutable_end_point() {
  set_has_end_point();
  if (end_point_ == NULL) {
    end_point_ = new ::tergeo::map::proto::Point2d;
  }
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.Line.end_point)
  return end_point_;
}
inline ::tergeo::map::proto::Point2d* Line::release_end_point() {
  // @@protoc_insertion_point(field_release:tergeo.map.proto.Line.end_point)
  clear_has_end_point();
  ::tergeo::map::proto::Point2d* temp = end_point_;
  end_point_ = NULL;
  return temp;
}
inline void Line::set_allocated_end_point(::tergeo::map::proto::Point2d* end_point) {
  delete end_point_;
  end_point_ = end_point;
  if (end_point) {
    set_has_end_point();
  } else {
    clear_has_end_point();
  }
  // @@protoc_insertion_point(field_set_allocated:tergeo.map.proto.Line.end_point)
}

// -------------------------------------------------------------------

// Polyline

// repeated .tergeo.map.proto.Point2d point = 1;
inline int Polyline::point_size() const {
  return point_.size();
}
inline void Polyline::clear_point() {
  point_.Clear();
}
inline const ::tergeo::map::proto::Point2d& Polyline::point(int index) const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Polyline.point)
  return point_.Get(index);
}
inline ::tergeo::map::proto::Point2d* Polyline::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.Polyline.point)
  return point_.Mutable(index);
}
inline ::tergeo::map::proto::Point2d* Polyline::add_point() {
  // @@protoc_insertion_point(field_add:tergeo.map.proto.Polyline.point)
  return point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Point2d >*
Polyline::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:tergeo.map.proto.Polyline.point)
  return &point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Point2d >&
Polyline::point() const {
  // @@protoc_insertion_point(field_list:tergeo.map.proto.Polyline.point)
  return point_;
}

// -------------------------------------------------------------------

// Polygon

// optional .tergeo.map.proto.Polygon.Type type = 1;
inline bool Polygon::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Polygon::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Polygon::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Polygon::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::tergeo::map::proto::Polygon_Type Polygon::type() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Polygon.type)
  return static_cast< ::tergeo::map::proto::Polygon_Type >(type_);
}
inline void Polygon::set_type(::tergeo::map::proto::Polygon_Type value) {
  assert(::tergeo::map::proto::Polygon_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:tergeo.map.proto.Polygon.type)
}

// repeated .tergeo.map.proto.Point2d point = 2;
inline int Polygon::point_size() const {
  return point_.size();
}
inline void Polygon::clear_point() {
  point_.Clear();
}
inline const ::tergeo::map::proto::Point2d& Polygon::point(int index) const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Polygon.point)
  return point_.Get(index);
}
inline ::tergeo::map::proto::Point2d* Polygon::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.Polygon.point)
  return point_.Mutable(index);
}
inline ::tergeo::map::proto::Point2d* Polygon::add_point() {
  // @@protoc_insertion_point(field_add:tergeo.map.proto.Polygon.point)
  return point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Point2d >*
Polygon::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:tergeo.map.proto.Polygon.point)
  return &point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Point2d >&
Polygon::point() const {
  // @@protoc_insertion_point(field_list:tergeo.map.proto.Polygon.point)
  return point_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace map
}  // namespace tergeo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tergeo::map::proto::Polygon_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tergeo::map::proto::Polygon_Type>() {
  return ::tergeo::map::proto::Polygon_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tergeo_2fmap_2fproto_2fgeometry_2eproto__INCLUDED
