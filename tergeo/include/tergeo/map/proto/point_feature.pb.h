// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tergeo/map/proto/point_feature.proto

#ifndef PROTOBUF_tergeo_2fmap_2fproto_2fpoint_5ffeature_2eproto__INCLUDED
#define PROTOBUF_tergeo_2fmap_2fproto_2fpoint_5ffeature_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "tergeo/map/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)

namespace tergeo {
namespace map {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tergeo_2fmap_2fproto_2fpoint_5ffeature_2eproto();
void protobuf_AssignDesc_tergeo_2fmap_2fproto_2fpoint_5ffeature_2eproto();
void protobuf_ShutdownFile_tergeo_2fmap_2fproto_2fpoint_5ffeature_2eproto();

class Signal;
class Tree;

// ===================================================================

class Signal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tergeo.map.proto.Signal) */ {
 public:
  Signal();
  virtual ~Signal();

  Signal(const Signal& from);

  inline Signal& operator=(const Signal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Signal& default_instance();

  void Swap(Signal* other);

  // implements Message ----------------------------------------------

  inline Signal* New() const { return New(NULL); }

  Signal* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Signal& from);
  void MergeFrom(const Signal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Signal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .tergeo.map.proto.Point2d point = 2;
  bool has_point() const;
  void clear_point();
  static const int kPointFieldNumber = 2;
  const ::tergeo::map::proto::Point2d& point() const;
  ::tergeo::map::proto::Point2d* mutable_point();
  ::tergeo::map::proto::Point2d* release_point();
  void set_allocated_point(::tergeo::map::proto::Point2d* point);

  // optional double height = 3;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  double height() const;
  void set_height(double value);

  // @@protoc_insertion_point(class_scope:tergeo.map.proto.Signal)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_point();
  inline void clear_has_point();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::tergeo::map::proto::Point2d* point_;
  double height_;
  friend void  protobuf_AddDesc_tergeo_2fmap_2fproto_2fpoint_5ffeature_2eproto();
  friend void protobuf_AssignDesc_tergeo_2fmap_2fproto_2fpoint_5ffeature_2eproto();
  friend void protobuf_ShutdownFile_tergeo_2fmap_2fproto_2fpoint_5ffeature_2eproto();

  void InitAsDefaultInstance();
  static Signal* default_instance_;
};
// -------------------------------------------------------------------

class Tree : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tergeo.map.proto.Tree) */ {
 public:
  Tree();
  virtual ~Tree();

  Tree(const Tree& from);

  inline Tree& operator=(const Tree& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tree& default_instance();

  void Swap(Tree* other);

  // implements Message ----------------------------------------------

  inline Tree* New() const { return New(NULL); }

  Tree* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tree& from);
  void MergeFrom(const Tree& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Tree* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .tergeo.map.proto.Point2d point = 2;
  bool has_point() const;
  void clear_point();
  static const int kPointFieldNumber = 2;
  const ::tergeo::map::proto::Point2d& point() const;
  ::tergeo::map::proto::Point2d* mutable_point();
  ::tergeo::map::proto::Point2d* release_point();
  void set_allocated_point(::tergeo::map::proto::Point2d* point);

  // @@protoc_insertion_point(class_scope:tergeo.map.proto.Tree)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_point();
  inline void clear_has_point();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::tergeo::map::proto::Point2d* point_;
  friend void  protobuf_AddDesc_tergeo_2fmap_2fproto_2fpoint_5ffeature_2eproto();
  friend void protobuf_AssignDesc_tergeo_2fmap_2fproto_2fpoint_5ffeature_2eproto();
  friend void protobuf_ShutdownFile_tergeo_2fmap_2fproto_2fpoint_5ffeature_2eproto();

  void InitAsDefaultInstance();
  static Tree* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Signal

// optional string id = 1;
inline bool Signal::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Signal::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Signal::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Signal::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Signal::id() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Signal.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Signal::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tergeo.map.proto.Signal.id)
}
inline void Signal::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tergeo.map.proto.Signal.id)
}
inline void Signal::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tergeo.map.proto.Signal.id)
}
inline ::std::string* Signal::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.Signal.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Signal::release_id() {
  // @@protoc_insertion_point(field_release:tergeo.map.proto.Signal.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Signal::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:tergeo.map.proto.Signal.id)
}

// optional .tergeo.map.proto.Point2d point = 2;
inline bool Signal::has_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Signal::set_has_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Signal::clear_has_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Signal::clear_point() {
  if (point_ != NULL) point_->::tergeo::map::proto::Point2d::Clear();
  clear_has_point();
}
inline const ::tergeo::map::proto::Point2d& Signal::point() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Signal.point)
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
inline ::tergeo::map::proto::Point2d* Signal::mutable_point() {
  set_has_point();
  if (point_ == NULL) {
    point_ = new ::tergeo::map::proto::Point2d;
  }
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.Signal.point)
  return point_;
}
inline ::tergeo::map::proto::Point2d* Signal::release_point() {
  // @@protoc_insertion_point(field_release:tergeo.map.proto.Signal.point)
  clear_has_point();
  ::tergeo::map::proto::Point2d* temp = point_;
  point_ = NULL;
  return temp;
}
inline void Signal::set_allocated_point(::tergeo::map::proto::Point2d* point) {
  delete point_;
  point_ = point;
  if (point) {
    set_has_point();
  } else {
    clear_has_point();
  }
  // @@protoc_insertion_point(field_set_allocated:tergeo.map.proto.Signal.point)
}

// optional double height = 3;
inline bool Signal::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Signal::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Signal::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Signal::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double Signal::height() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Signal.height)
  return height_;
}
inline void Signal::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:tergeo.map.proto.Signal.height)
}

// -------------------------------------------------------------------

// Tree

// optional string id = 1;
inline bool Tree::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tree::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tree::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tree::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Tree::id() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Tree.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tree::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tergeo.map.proto.Tree.id)
}
inline void Tree::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tergeo.map.proto.Tree.id)
}
inline void Tree::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tergeo.map.proto.Tree.id)
}
inline ::std::string* Tree::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.Tree.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tree::release_id() {
  // @@protoc_insertion_point(field_release:tergeo.map.proto.Tree.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tree::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:tergeo.map.proto.Tree.id)
}

// optional .tergeo.map.proto.Point2d point = 2;
inline bool Tree::has_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tree::set_has_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tree::clear_has_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tree::clear_point() {
  if (point_ != NULL) point_->::tergeo::map::proto::Point2d::Clear();
  clear_has_point();
}
inline const ::tergeo::map::proto::Point2d& Tree::point() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Tree.point)
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
inline ::tergeo::map::proto::Point2d* Tree::mutable_point() {
  set_has_point();
  if (point_ == NULL) {
    point_ = new ::tergeo::map::proto::Point2d;
  }
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.Tree.point)
  return point_;
}
inline ::tergeo::map::proto::Point2d* Tree::release_point() {
  // @@protoc_insertion_point(field_release:tergeo.map.proto.Tree.point)
  clear_has_point();
  ::tergeo::map::proto::Point2d* temp = point_;
  point_ = NULL;
  return temp;
}
inline void Tree::set_allocated_point(::tergeo::map::proto::Point2d* point) {
  delete point_;
  point_ = point;
  if (point) {
    set_has_point();
  } else {
    clear_has_point();
  }
  // @@protoc_insertion_point(field_set_allocated:tergeo.map.proto.Tree.point)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace map
}  // namespace tergeo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tergeo_2fmap_2fproto_2fpoint_5ffeature_2eproto__INCLUDED
