// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tergeo/map/proto/polygon_feature.proto

#ifndef PROTOBUF_tergeo_2fmap_2fproto_2fpolygon_5ffeature_2eproto__INCLUDED
#define PROTOBUF_tergeo_2fmap_2fproto_2fpolygon_5ffeature_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "tergeo/map/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)

namespace tergeo {
namespace map {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tergeo_2fmap_2fproto_2fpolygon_5ffeature_2eproto();
void protobuf_AssignDesc_tergeo_2fmap_2fproto_2fpolygon_5ffeature_2eproto();
void protobuf_ShutdownFile_tergeo_2fmap_2fproto_2fpolygon_5ffeature_2eproto();

class ClearArea;
class Crosswalk;
class Junction;
class ParkingSpace;
class Road;

// ===================================================================

class Crosswalk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tergeo.map.proto.Crosswalk) */ {
 public:
  Crosswalk();
  virtual ~Crosswalk();

  Crosswalk(const Crosswalk& from);

  inline Crosswalk& operator=(const Crosswalk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Crosswalk& default_instance();

  void Swap(Crosswalk* other);

  // implements Message ----------------------------------------------

  inline Crosswalk* New() const { return New(NULL); }

  Crosswalk* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Crosswalk& from);
  void MergeFrom(const Crosswalk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Crosswalk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .tergeo.map.proto.Polygon polygon = 2;
  bool has_polygon() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 2;
  const ::tergeo::map::proto::Polygon& polygon() const;
  ::tergeo::map::proto::Polygon* mutable_polygon();
  ::tergeo::map::proto::Polygon* release_polygon();
  void set_allocated_polygon(::tergeo::map::proto::Polygon* polygon);

  // @@protoc_insertion_point(class_scope:tergeo.map.proto.Crosswalk)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_polygon();
  inline void clear_has_polygon();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::tergeo::map::proto::Polygon* polygon_;
  friend void  protobuf_AddDesc_tergeo_2fmap_2fproto_2fpolygon_5ffeature_2eproto();
  friend void protobuf_AssignDesc_tergeo_2fmap_2fproto_2fpolygon_5ffeature_2eproto();
  friend void protobuf_ShutdownFile_tergeo_2fmap_2fproto_2fpolygon_5ffeature_2eproto();

  void InitAsDefaultInstance();
  static Crosswalk* default_instance_;
};
// -------------------------------------------------------------------

class Junction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tergeo.map.proto.Junction) */ {
 public:
  Junction();
  virtual ~Junction();

  Junction(const Junction& from);

  inline Junction& operator=(const Junction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Junction& default_instance();

  void Swap(Junction* other);

  // implements Message ----------------------------------------------

  inline Junction* New() const { return New(NULL); }

  Junction* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Junction& from);
  void MergeFrom(const Junction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Junction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .tergeo.map.proto.Polygon polygon = 2;
  bool has_polygon() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 2;
  const ::tergeo::map::proto::Polygon& polygon() const;
  ::tergeo::map::proto::Polygon* mutable_polygon();
  ::tergeo::map::proto::Polygon* release_polygon();
  void set_allocated_polygon(::tergeo::map::proto::Polygon* polygon);

  // @@protoc_insertion_point(class_scope:tergeo.map.proto.Junction)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_polygon();
  inline void clear_has_polygon();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::tergeo::map::proto::Polygon* polygon_;
  friend void  protobuf_AddDesc_tergeo_2fmap_2fproto_2fpolygon_5ffeature_2eproto();
  friend void protobuf_AssignDesc_tergeo_2fmap_2fproto_2fpolygon_5ffeature_2eproto();
  friend void protobuf_ShutdownFile_tergeo_2fmap_2fproto_2fpolygon_5ffeature_2eproto();

  void InitAsDefaultInstance();
  static Junction* default_instance_;
};
// -------------------------------------------------------------------

class ClearArea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tergeo.map.proto.ClearArea) */ {
 public:
  ClearArea();
  virtual ~ClearArea();

  ClearArea(const ClearArea& from);

  inline ClearArea& operator=(const ClearArea& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearArea& default_instance();

  void Swap(ClearArea* other);

  // implements Message ----------------------------------------------

  inline ClearArea* New() const { return New(NULL); }

  ClearArea* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClearArea& from);
  void MergeFrom(const ClearArea& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClearArea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // repeated .tergeo.map.proto.Polygon polygon = 2;
  int polygon_size() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 2;
  const ::tergeo::map::proto::Polygon& polygon(int index) const;
  ::tergeo::map::proto::Polygon* mutable_polygon(int index);
  ::tergeo::map::proto::Polygon* add_polygon();
  ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Polygon >*
      mutable_polygon();
  const ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Polygon >&
      polygon() const;

  // @@protoc_insertion_point(class_scope:tergeo.map.proto.ClearArea)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Polygon > polygon_;
  friend void  protobuf_AddDesc_tergeo_2fmap_2fproto_2fpolygon_5ffeature_2eproto();
  friend void protobuf_AssignDesc_tergeo_2fmap_2fproto_2fpolygon_5ffeature_2eproto();
  friend void protobuf_ShutdownFile_tergeo_2fmap_2fproto_2fpolygon_5ffeature_2eproto();

  void InitAsDefaultInstance();
  static ClearArea* default_instance_;
};
// -------------------------------------------------------------------

class ParkingSpace : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tergeo.map.proto.ParkingSpace) */ {
 public:
  ParkingSpace();
  virtual ~ParkingSpace();

  ParkingSpace(const ParkingSpace& from);

  inline ParkingSpace& operator=(const ParkingSpace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParkingSpace& default_instance();

  void Swap(ParkingSpace* other);

  // implements Message ----------------------------------------------

  inline ParkingSpace* New() const { return New(NULL); }

  ParkingSpace* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParkingSpace& from);
  void MergeFrom(const ParkingSpace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ParkingSpace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // repeated .tergeo.map.proto.Polygon polygon = 2;
  int polygon_size() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 2;
  const ::tergeo::map::proto::Polygon& polygon(int index) const;
  ::tergeo::map::proto::Polygon* mutable_polygon(int index);
  ::tergeo::map::proto::Polygon* add_polygon();
  ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Polygon >*
      mutable_polygon();
  const ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Polygon >&
      polygon() const;

  // @@protoc_insertion_point(class_scope:tergeo.map.proto.ParkingSpace)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Polygon > polygon_;
  friend void  protobuf_AddDesc_tergeo_2fmap_2fproto_2fpolygon_5ffeature_2eproto();
  friend void protobuf_AssignDesc_tergeo_2fmap_2fproto_2fpolygon_5ffeature_2eproto();
  friend void protobuf_ShutdownFile_tergeo_2fmap_2fproto_2fpolygon_5ffeature_2eproto();

  void InitAsDefaultInstance();
  static ParkingSpace* default_instance_;
};
// -------------------------------------------------------------------

class Road : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tergeo.map.proto.Road) */ {
 public:
  Road();
  virtual ~Road();

  Road(const Road& from);

  inline Road& operator=(const Road& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Road& default_instance();

  void Swap(Road* other);

  // implements Message ----------------------------------------------

  inline Road* New() const { return New(NULL); }

  Road* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Road& from);
  void MergeFrom(const Road& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Road* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // repeated .tergeo.map.proto.Polygon polygon = 2;
  int polygon_size() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 2;
  const ::tergeo::map::proto::Polygon& polygon(int index) const;
  ::tergeo::map::proto::Polygon* mutable_polygon(int index);
  ::tergeo::map::proto::Polygon* add_polygon();
  ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Polygon >*
      mutable_polygon();
  const ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Polygon >&
      polygon() const;

  // @@protoc_insertion_point(class_scope:tergeo.map.proto.Road)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Polygon > polygon_;
  friend void  protobuf_AddDesc_tergeo_2fmap_2fproto_2fpolygon_5ffeature_2eproto();
  friend void protobuf_AssignDesc_tergeo_2fmap_2fproto_2fpolygon_5ffeature_2eproto();
  friend void protobuf_ShutdownFile_tergeo_2fmap_2fproto_2fpolygon_5ffeature_2eproto();

  void InitAsDefaultInstance();
  static Road* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Crosswalk

// optional string id = 1;
inline bool Crosswalk::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Crosswalk::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Crosswalk::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Crosswalk::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Crosswalk::id() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Crosswalk.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Crosswalk::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tergeo.map.proto.Crosswalk.id)
}
inline void Crosswalk::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tergeo.map.proto.Crosswalk.id)
}
inline void Crosswalk::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tergeo.map.proto.Crosswalk.id)
}
inline ::std::string* Crosswalk::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.Crosswalk.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Crosswalk::release_id() {
  // @@protoc_insertion_point(field_release:tergeo.map.proto.Crosswalk.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Crosswalk::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:tergeo.map.proto.Crosswalk.id)
}

// optional .tergeo.map.proto.Polygon polygon = 2;
inline bool Crosswalk::has_polygon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Crosswalk::set_has_polygon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Crosswalk::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Crosswalk::clear_polygon() {
  if (polygon_ != NULL) polygon_->::tergeo::map::proto::Polygon::Clear();
  clear_has_polygon();
}
inline const ::tergeo::map::proto::Polygon& Crosswalk::polygon() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Crosswalk.polygon)
  return polygon_ != NULL ? *polygon_ : *default_instance_->polygon_;
}
inline ::tergeo::map::proto::Polygon* Crosswalk::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) {
    polygon_ = new ::tergeo::map::proto::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.Crosswalk.polygon)
  return polygon_;
}
inline ::tergeo::map::proto::Polygon* Crosswalk::release_polygon() {
  // @@protoc_insertion_point(field_release:tergeo.map.proto.Crosswalk.polygon)
  clear_has_polygon();
  ::tergeo::map::proto::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
inline void Crosswalk::set_allocated_polygon(::tergeo::map::proto::Polygon* polygon) {
  delete polygon_;
  polygon_ = polygon;
  if (polygon) {
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  // @@protoc_insertion_point(field_set_allocated:tergeo.map.proto.Crosswalk.polygon)
}

// -------------------------------------------------------------------

// Junction

// optional string id = 1;
inline bool Junction::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Junction::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Junction::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Junction::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Junction::id() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Junction.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Junction::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tergeo.map.proto.Junction.id)
}
inline void Junction::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tergeo.map.proto.Junction.id)
}
inline void Junction::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tergeo.map.proto.Junction.id)
}
inline ::std::string* Junction::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.Junction.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Junction::release_id() {
  // @@protoc_insertion_point(field_release:tergeo.map.proto.Junction.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Junction::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:tergeo.map.proto.Junction.id)
}

// optional .tergeo.map.proto.Polygon polygon = 2;
inline bool Junction::has_polygon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Junction::set_has_polygon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Junction::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Junction::clear_polygon() {
  if (polygon_ != NULL) polygon_->::tergeo::map::proto::Polygon::Clear();
  clear_has_polygon();
}
inline const ::tergeo::map::proto::Polygon& Junction::polygon() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Junction.polygon)
  return polygon_ != NULL ? *polygon_ : *default_instance_->polygon_;
}
inline ::tergeo::map::proto::Polygon* Junction::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) {
    polygon_ = new ::tergeo::map::proto::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.Junction.polygon)
  return polygon_;
}
inline ::tergeo::map::proto::Polygon* Junction::release_polygon() {
  // @@protoc_insertion_point(field_release:tergeo.map.proto.Junction.polygon)
  clear_has_polygon();
  ::tergeo::map::proto::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
inline void Junction::set_allocated_polygon(::tergeo::map::proto::Polygon* polygon) {
  delete polygon_;
  polygon_ = polygon;
  if (polygon) {
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  // @@protoc_insertion_point(field_set_allocated:tergeo.map.proto.Junction.polygon)
}

// -------------------------------------------------------------------

// ClearArea

// optional string id = 1;
inline bool ClearArea::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClearArea::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClearArea::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClearArea::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& ClearArea::id() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.ClearArea.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClearArea::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tergeo.map.proto.ClearArea.id)
}
inline void ClearArea::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tergeo.map.proto.ClearArea.id)
}
inline void ClearArea::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tergeo.map.proto.ClearArea.id)
}
inline ::std::string* ClearArea::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.ClearArea.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClearArea::release_id() {
  // @@protoc_insertion_point(field_release:tergeo.map.proto.ClearArea.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClearArea::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:tergeo.map.proto.ClearArea.id)
}

// repeated .tergeo.map.proto.Polygon polygon = 2;
inline int ClearArea::polygon_size() const {
  return polygon_.size();
}
inline void ClearArea::clear_polygon() {
  polygon_.Clear();
}
inline const ::tergeo::map::proto::Polygon& ClearArea::polygon(int index) const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.ClearArea.polygon)
  return polygon_.Get(index);
}
inline ::tergeo::map::proto::Polygon* ClearArea::mutable_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.ClearArea.polygon)
  return polygon_.Mutable(index);
}
inline ::tergeo::map::proto::Polygon* ClearArea::add_polygon() {
  // @@protoc_insertion_point(field_add:tergeo.map.proto.ClearArea.polygon)
  return polygon_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Polygon >*
ClearArea::mutable_polygon() {
  // @@protoc_insertion_point(field_mutable_list:tergeo.map.proto.ClearArea.polygon)
  return &polygon_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Polygon >&
ClearArea::polygon() const {
  // @@protoc_insertion_point(field_list:tergeo.map.proto.ClearArea.polygon)
  return polygon_;
}

// -------------------------------------------------------------------

// ParkingSpace

// optional string id = 1;
inline bool ParkingSpace::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParkingSpace::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParkingSpace::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParkingSpace::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& ParkingSpace::id() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.ParkingSpace.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParkingSpace::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tergeo.map.proto.ParkingSpace.id)
}
inline void ParkingSpace::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tergeo.map.proto.ParkingSpace.id)
}
inline void ParkingSpace::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tergeo.map.proto.ParkingSpace.id)
}
inline ::std::string* ParkingSpace::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.ParkingSpace.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParkingSpace::release_id() {
  // @@protoc_insertion_point(field_release:tergeo.map.proto.ParkingSpace.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParkingSpace::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:tergeo.map.proto.ParkingSpace.id)
}

// repeated .tergeo.map.proto.Polygon polygon = 2;
inline int ParkingSpace::polygon_size() const {
  return polygon_.size();
}
inline void ParkingSpace::clear_polygon() {
  polygon_.Clear();
}
inline const ::tergeo::map::proto::Polygon& ParkingSpace::polygon(int index) const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.ParkingSpace.polygon)
  return polygon_.Get(index);
}
inline ::tergeo::map::proto::Polygon* ParkingSpace::mutable_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.ParkingSpace.polygon)
  return polygon_.Mutable(index);
}
inline ::tergeo::map::proto::Polygon* ParkingSpace::add_polygon() {
  // @@protoc_insertion_point(field_add:tergeo.map.proto.ParkingSpace.polygon)
  return polygon_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Polygon >*
ParkingSpace::mutable_polygon() {
  // @@protoc_insertion_point(field_mutable_list:tergeo.map.proto.ParkingSpace.polygon)
  return &polygon_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Polygon >&
ParkingSpace::polygon() const {
  // @@protoc_insertion_point(field_list:tergeo.map.proto.ParkingSpace.polygon)
  return polygon_;
}

// -------------------------------------------------------------------

// Road

// optional string id = 1;
inline bool Road::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Road::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Road::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Road::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Road::id() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Road.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Road::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tergeo.map.proto.Road.id)
}
inline void Road::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tergeo.map.proto.Road.id)
}
inline void Road::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tergeo.map.proto.Road.id)
}
inline ::std::string* Road::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.Road.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Road::release_id() {
  // @@protoc_insertion_point(field_release:tergeo.map.proto.Road.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Road::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:tergeo.map.proto.Road.id)
}

// repeated .tergeo.map.proto.Polygon polygon = 2;
inline int Road::polygon_size() const {
  return polygon_.size();
}
inline void Road::clear_polygon() {
  polygon_.Clear();
}
inline const ::tergeo::map::proto::Polygon& Road::polygon(int index) const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Road.polygon)
  return polygon_.Get(index);
}
inline ::tergeo::map::proto::Polygon* Road::mutable_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.Road.polygon)
  return polygon_.Mutable(index);
}
inline ::tergeo::map::proto::Polygon* Road::add_polygon() {
  // @@protoc_insertion_point(field_add:tergeo.map.proto.Road.polygon)
  return polygon_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Polygon >*
Road::mutable_polygon() {
  // @@protoc_insertion_point(field_mutable_list:tergeo.map.proto.Road.polygon)
  return &polygon_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::Polygon >&
Road::polygon() const {
  // @@protoc_insertion_point(field_list:tergeo.map.proto.Road.polygon)
  return polygon_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace map
}  // namespace tergeo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tergeo_2fmap_2fproto_2fpolygon_5ffeature_2eproto__INCLUDED
