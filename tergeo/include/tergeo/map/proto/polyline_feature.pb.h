// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tergeo/map/proto/polyline_feature.proto

#ifndef PROTOBUF_tergeo_2fmap_2fproto_2fpolyline_5ffeature_2eproto__INCLUDED
#define PROTOBUF_tergeo_2fmap_2fproto_2fpolyline_5ffeature_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "tergeo/map/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)

namespace tergeo {
namespace map {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tergeo_2fmap_2fproto_2fpolyline_5ffeature_2eproto();
void protobuf_AssignDesc_tergeo_2fmap_2fproto_2fpolyline_5ffeature_2eproto();
void protobuf_ShutdownFile_tergeo_2fmap_2fproto_2fpolyline_5ffeature_2eproto();

class LaneLine;
class RoadEdge;

enum RoadEdge_Type {
  RoadEdge_Type_UNKNOWN = 0,
  RoadEdge_Type_GREEN_BELT = 1,
  RoadEdge_Type_CURB = 2,
  RoadEdge_Type_PARTERRE = 3,
  RoadEdge_Type_WALL = 4,
  RoadEdge_Type_SUNKEN_SIDE = 5,
  RoadEdge_Type_VIRTUAL_SIDE = 6
};
bool RoadEdge_Type_IsValid(int value);
const RoadEdge_Type RoadEdge_Type_Type_MIN = RoadEdge_Type_UNKNOWN;
const RoadEdge_Type RoadEdge_Type_Type_MAX = RoadEdge_Type_VIRTUAL_SIDE;
const int RoadEdge_Type_Type_ARRAYSIZE = RoadEdge_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoadEdge_Type_descriptor();
inline const ::std::string& RoadEdge_Type_Name(RoadEdge_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoadEdge_Type_descriptor(), value);
}
inline bool RoadEdge_Type_Parse(
    const ::std::string& name, RoadEdge_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoadEdge_Type>(
    RoadEdge_Type_descriptor(), name, value);
}
enum LaneLine_Type {
  LaneLine_Type_UNKNOWN = 0,
  LaneLine_Type_SOLID_LINE = 1,
  LaneLine_Type_DOTEED_LINE = 2,
  LaneLine_Type_DOUBLE_SOLID_LINE = 3
};
bool LaneLine_Type_IsValid(int value);
const LaneLine_Type LaneLine_Type_Type_MIN = LaneLine_Type_UNKNOWN;
const LaneLine_Type LaneLine_Type_Type_MAX = LaneLine_Type_DOUBLE_SOLID_LINE;
const int LaneLine_Type_Type_ARRAYSIZE = LaneLine_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* LaneLine_Type_descriptor();
inline const ::std::string& LaneLine_Type_Name(LaneLine_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    LaneLine_Type_descriptor(), value);
}
inline bool LaneLine_Type_Parse(
    const ::std::string& name, LaneLine_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaneLine_Type>(
    LaneLine_Type_descriptor(), name, value);
}
// ===================================================================

class RoadEdge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tergeo.map.proto.RoadEdge) */ {
 public:
  RoadEdge();
  virtual ~RoadEdge();

  RoadEdge(const RoadEdge& from);

  inline RoadEdge& operator=(const RoadEdge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoadEdge& default_instance();

  void Swap(RoadEdge* other);

  // implements Message ----------------------------------------------

  inline RoadEdge* New() const { return New(NULL); }

  RoadEdge* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoadEdge& from);
  void MergeFrom(const RoadEdge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RoadEdge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RoadEdge_Type Type;
  static const Type UNKNOWN =
    RoadEdge_Type_UNKNOWN;
  static const Type GREEN_BELT =
    RoadEdge_Type_GREEN_BELT;
  static const Type CURB =
    RoadEdge_Type_CURB;
  static const Type PARTERRE =
    RoadEdge_Type_PARTERRE;
  static const Type WALL =
    RoadEdge_Type_WALL;
  static const Type SUNKEN_SIDE =
    RoadEdge_Type_SUNKEN_SIDE;
  static const Type VIRTUAL_SIDE =
    RoadEdge_Type_VIRTUAL_SIDE;
  static inline bool Type_IsValid(int value) {
    return RoadEdge_Type_IsValid(value);
  }
  static const Type Type_MIN =
    RoadEdge_Type_Type_MIN;
  static const Type Type_MAX =
    RoadEdge_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    RoadEdge_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return RoadEdge_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return RoadEdge_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return RoadEdge_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .tergeo.map.proto.Polyline polyline = 2;
  bool has_polyline() const;
  void clear_polyline();
  static const int kPolylineFieldNumber = 2;
  const ::tergeo::map::proto::Polyline& polyline() const;
  ::tergeo::map::proto::Polyline* mutable_polyline();
  ::tergeo::map::proto::Polyline* release_polyline();
  void set_allocated_polyline(::tergeo::map::proto::Polyline* polyline);

  // optional .tergeo.map.proto.RoadEdge.Type type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::tergeo::map::proto::RoadEdge_Type type() const;
  void set_type(::tergeo::map::proto::RoadEdge_Type value);

  // @@protoc_insertion_point(class_scope:tergeo.map.proto.RoadEdge)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_polyline();
  inline void clear_has_polyline();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::tergeo::map::proto::Polyline* polyline_;
  int type_;
  friend void  protobuf_AddDesc_tergeo_2fmap_2fproto_2fpolyline_5ffeature_2eproto();
  friend void protobuf_AssignDesc_tergeo_2fmap_2fproto_2fpolyline_5ffeature_2eproto();
  friend void protobuf_ShutdownFile_tergeo_2fmap_2fproto_2fpolyline_5ffeature_2eproto();

  void InitAsDefaultInstance();
  static RoadEdge* default_instance_;
};
// -------------------------------------------------------------------

class LaneLine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tergeo.map.proto.LaneLine) */ {
 public:
  LaneLine();
  virtual ~LaneLine();

  LaneLine(const LaneLine& from);

  inline LaneLine& operator=(const LaneLine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneLine& default_instance();

  void Swap(LaneLine* other);

  // implements Message ----------------------------------------------

  inline LaneLine* New() const { return New(NULL); }

  LaneLine* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LaneLine& from);
  void MergeFrom(const LaneLine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LaneLine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LaneLine_Type Type;
  static const Type UNKNOWN =
    LaneLine_Type_UNKNOWN;
  static const Type SOLID_LINE =
    LaneLine_Type_SOLID_LINE;
  static const Type DOTEED_LINE =
    LaneLine_Type_DOTEED_LINE;
  static const Type DOUBLE_SOLID_LINE =
    LaneLine_Type_DOUBLE_SOLID_LINE;
  static inline bool Type_IsValid(int value) {
    return LaneLine_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LaneLine_Type_Type_MIN;
  static const Type Type_MAX =
    LaneLine_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LaneLine_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return LaneLine_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return LaneLine_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return LaneLine_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .tergeo.map.proto.Polyline polyline = 2;
  bool has_polyline() const;
  void clear_polyline();
  static const int kPolylineFieldNumber = 2;
  const ::tergeo::map::proto::Polyline& polyline() const;
  ::tergeo::map::proto::Polyline* mutable_polyline();
  ::tergeo::map::proto::Polyline* release_polyline();
  void set_allocated_polyline(::tergeo::map::proto::Polyline* polyline);

  // optional .tergeo.map.proto.LaneLine.Type type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::tergeo::map::proto::LaneLine_Type type() const;
  void set_type(::tergeo::map::proto::LaneLine_Type value);

  // @@protoc_insertion_point(class_scope:tergeo.map.proto.LaneLine)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_polyline();
  inline void clear_has_polyline();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::tergeo::map::proto::Polyline* polyline_;
  int type_;
  friend void  protobuf_AddDesc_tergeo_2fmap_2fproto_2fpolyline_5ffeature_2eproto();
  friend void protobuf_AssignDesc_tergeo_2fmap_2fproto_2fpolyline_5ffeature_2eproto();
  friend void protobuf_ShutdownFile_tergeo_2fmap_2fproto_2fpolyline_5ffeature_2eproto();

  void InitAsDefaultInstance();
  static LaneLine* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RoadEdge

// optional string id = 1;
inline bool RoadEdge::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoadEdge::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoadEdge::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoadEdge::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& RoadEdge::id() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.RoadEdge.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoadEdge::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tergeo.map.proto.RoadEdge.id)
}
inline void RoadEdge::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tergeo.map.proto.RoadEdge.id)
}
inline void RoadEdge::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tergeo.map.proto.RoadEdge.id)
}
inline ::std::string* RoadEdge::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.RoadEdge.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoadEdge::release_id() {
  // @@protoc_insertion_point(field_release:tergeo.map.proto.RoadEdge.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoadEdge::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:tergeo.map.proto.RoadEdge.id)
}

// optional .tergeo.map.proto.Polyline polyline = 2;
inline bool RoadEdge::has_polyline() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoadEdge::set_has_polyline() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoadEdge::clear_has_polyline() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoadEdge::clear_polyline() {
  if (polyline_ != NULL) polyline_->::tergeo::map::proto::Polyline::Clear();
  clear_has_polyline();
}
inline const ::tergeo::map::proto::Polyline& RoadEdge::polyline() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.RoadEdge.polyline)
  return polyline_ != NULL ? *polyline_ : *default_instance_->polyline_;
}
inline ::tergeo::map::proto::Polyline* RoadEdge::mutable_polyline() {
  set_has_polyline();
  if (polyline_ == NULL) {
    polyline_ = new ::tergeo::map::proto::Polyline;
  }
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.RoadEdge.polyline)
  return polyline_;
}
inline ::tergeo::map::proto::Polyline* RoadEdge::release_polyline() {
  // @@protoc_insertion_point(field_release:tergeo.map.proto.RoadEdge.polyline)
  clear_has_polyline();
  ::tergeo::map::proto::Polyline* temp = polyline_;
  polyline_ = NULL;
  return temp;
}
inline void RoadEdge::set_allocated_polyline(::tergeo::map::proto::Polyline* polyline) {
  delete polyline_;
  polyline_ = polyline;
  if (polyline) {
    set_has_polyline();
  } else {
    clear_has_polyline();
  }
  // @@protoc_insertion_point(field_set_allocated:tergeo.map.proto.RoadEdge.polyline)
}

// optional .tergeo.map.proto.RoadEdge.Type type = 3;
inline bool RoadEdge::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoadEdge::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoadEdge::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoadEdge::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::tergeo::map::proto::RoadEdge_Type RoadEdge::type() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.RoadEdge.type)
  return static_cast< ::tergeo::map::proto::RoadEdge_Type >(type_);
}
inline void RoadEdge::set_type(::tergeo::map::proto::RoadEdge_Type value) {
  assert(::tergeo::map::proto::RoadEdge_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:tergeo.map.proto.RoadEdge.type)
}

// -------------------------------------------------------------------

// LaneLine

// optional string id = 1;
inline bool LaneLine::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneLine::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneLine::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneLine::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& LaneLine::id() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.LaneLine.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaneLine::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tergeo.map.proto.LaneLine.id)
}
inline void LaneLine::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tergeo.map.proto.LaneLine.id)
}
inline void LaneLine::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tergeo.map.proto.LaneLine.id)
}
inline ::std::string* LaneLine::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.LaneLine.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaneLine::release_id() {
  // @@protoc_insertion_point(field_release:tergeo.map.proto.LaneLine.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaneLine::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:tergeo.map.proto.LaneLine.id)
}

// optional .tergeo.map.proto.Polyline polyline = 2;
inline bool LaneLine::has_polyline() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneLine::set_has_polyline() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneLine::clear_has_polyline() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneLine::clear_polyline() {
  if (polyline_ != NULL) polyline_->::tergeo::map::proto::Polyline::Clear();
  clear_has_polyline();
}
inline const ::tergeo::map::proto::Polyline& LaneLine::polyline() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.LaneLine.polyline)
  return polyline_ != NULL ? *polyline_ : *default_instance_->polyline_;
}
inline ::tergeo::map::proto::Polyline* LaneLine::mutable_polyline() {
  set_has_polyline();
  if (polyline_ == NULL) {
    polyline_ = new ::tergeo::map::proto::Polyline;
  }
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.LaneLine.polyline)
  return polyline_;
}
inline ::tergeo::map::proto::Polyline* LaneLine::release_polyline() {
  // @@protoc_insertion_point(field_release:tergeo.map.proto.LaneLine.polyline)
  clear_has_polyline();
  ::tergeo::map::proto::Polyline* temp = polyline_;
  polyline_ = NULL;
  return temp;
}
inline void LaneLine::set_allocated_polyline(::tergeo::map::proto::Polyline* polyline) {
  delete polyline_;
  polyline_ = polyline;
  if (polyline) {
    set_has_polyline();
  } else {
    clear_has_polyline();
  }
  // @@protoc_insertion_point(field_set_allocated:tergeo.map.proto.LaneLine.polyline)
}

// optional .tergeo.map.proto.LaneLine.Type type = 3;
inline bool LaneLine::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneLine::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneLine::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneLine::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::tergeo::map::proto::LaneLine_Type LaneLine::type() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.LaneLine.type)
  return static_cast< ::tergeo::map::proto::LaneLine_Type >(type_);
}
inline void LaneLine::set_type(::tergeo::map::proto::LaneLine_Type value) {
  assert(::tergeo::map::proto::LaneLine_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:tergeo.map.proto.LaneLine.type)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace map
}  // namespace tergeo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tergeo::map::proto::RoadEdge_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tergeo::map::proto::RoadEdge_Type>() {
  return ::tergeo::map::proto::RoadEdge_Type_descriptor();
}
template <> struct is_proto_enum< ::tergeo::map::proto::LaneLine_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tergeo::map::proto::LaneLine_Type>() {
  return ::tergeo::map::proto::LaneLine_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tergeo_2fmap_2fproto_2fpolyline_5ffeature_2eproto__INCLUDED
