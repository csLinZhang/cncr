// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tergeo/map/proto/raster.proto

#ifndef PROTOBUF_tergeo_2fmap_2fproto_2fraster_2eproto__INCLUDED
#define PROTOBUF_tergeo_2fmap_2fproto_2fraster_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tergeo {
namespace map {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tergeo_2fmap_2fproto_2fraster_2eproto();
void protobuf_AssignDesc_tergeo_2fmap_2fproto_2fraster_2eproto();
void protobuf_ShutdownFile_tergeo_2fmap_2fproto_2fraster_2eproto();

class Affine;
class Raster;

// ===================================================================

class Affine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tergeo.map.proto.Affine) */ {
 public:
  Affine();
  virtual ~Affine();

  Affine(const Affine& from);

  inline Affine& operator=(const Affine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Affine& default_instance();

  void Swap(Affine* other);

  // implements Message ----------------------------------------------

  inline Affine* New() const { return New(NULL); }

  Affine* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Affine& from);
  void MergeFrom(const Affine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Affine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double m11 = 1;
  bool has_m11() const;
  void clear_m11();
  static const int kM11FieldNumber = 1;
  double m11() const;
  void set_m11(double value);

  // optional double m12 = 2;
  bool has_m12() const;
  void clear_m12();
  static const int kM12FieldNumber = 2;
  double m12() const;
  void set_m12(double value);

  // optional double m13 = 3;
  bool has_m13() const;
  void clear_m13();
  static const int kM13FieldNumber = 3;
  double m13() const;
  void set_m13(double value);

  // optional double m21 = 4;
  bool has_m21() const;
  void clear_m21();
  static const int kM21FieldNumber = 4;
  double m21() const;
  void set_m21(double value);

  // optional double m22 = 5;
  bool has_m22() const;
  void clear_m22();
  static const int kM22FieldNumber = 5;
  double m22() const;
  void set_m22(double value);

  // optional double m23 = 6;
  bool has_m23() const;
  void clear_m23();
  static const int kM23FieldNumber = 6;
  double m23() const;
  void set_m23(double value);

  // @@protoc_insertion_point(class_scope:tergeo.map.proto.Affine)
 private:
  inline void set_has_m11();
  inline void clear_has_m11();
  inline void set_has_m12();
  inline void clear_has_m12();
  inline void set_has_m13();
  inline void clear_has_m13();
  inline void set_has_m21();
  inline void clear_has_m21();
  inline void set_has_m22();
  inline void clear_has_m22();
  inline void set_has_m23();
  inline void clear_has_m23();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double m11_;
  double m12_;
  double m13_;
  double m21_;
  double m22_;
  double m23_;
  friend void  protobuf_AddDesc_tergeo_2fmap_2fproto_2fraster_2eproto();
  friend void protobuf_AssignDesc_tergeo_2fmap_2fproto_2fraster_2eproto();
  friend void protobuf_ShutdownFile_tergeo_2fmap_2fproto_2fraster_2eproto();

  void InitAsDefaultInstance();
  static Affine* default_instance_;
};
// -------------------------------------------------------------------

class Raster : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tergeo.map.proto.Raster) */ {
 public:
  Raster();
  virtual ~Raster();

  Raster(const Raster& from);

  inline Raster& operator=(const Raster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Raster& default_instance();

  void Swap(Raster* other);

  // implements Message ----------------------------------------------

  inline Raster* New() const { return New(NULL); }

  Raster* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Raster& from);
  void MergeFrom(const Raster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Raster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tergeo.map.proto.Affine affine = 1;
  bool has_affine() const;
  void clear_affine();
  static const int kAffineFieldNumber = 1;
  const ::tergeo::map::proto::Affine& affine() const;
  ::tergeo::map::proto::Affine* mutable_affine();
  ::tergeo::map::proto::Affine* release_affine();
  void set_allocated_affine(::tergeo::map::proto::Affine* affine);

  // optional string image_name = 2;
  bool has_image_name() const;
  void clear_image_name();
  static const int kImageNameFieldNumber = 2;
  const ::std::string& image_name() const;
  void set_image_name(const ::std::string& value);
  void set_image_name(const char* value);
  void set_image_name(const char* value, size_t size);
  ::std::string* mutable_image_name();
  ::std::string* release_image_name();
  void set_allocated_image_name(::std::string* image_name);

  // @@protoc_insertion_point(class_scope:tergeo.map.proto.Raster)
 private:
  inline void set_has_affine();
  inline void clear_has_affine();
  inline void set_has_image_name();
  inline void clear_has_image_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::tergeo::map::proto::Affine* affine_;
  ::google::protobuf::internal::ArenaStringPtr image_name_;
  friend void  protobuf_AddDesc_tergeo_2fmap_2fproto_2fraster_2eproto();
  friend void protobuf_AssignDesc_tergeo_2fmap_2fproto_2fraster_2eproto();
  friend void protobuf_ShutdownFile_tergeo_2fmap_2fproto_2fraster_2eproto();

  void InitAsDefaultInstance();
  static Raster* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Affine

// optional double m11 = 1;
inline bool Affine::has_m11() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Affine::set_has_m11() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Affine::clear_has_m11() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Affine::clear_m11() {
  m11_ = 0;
  clear_has_m11();
}
inline double Affine::m11() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Affine.m11)
  return m11_;
}
inline void Affine::set_m11(double value) {
  set_has_m11();
  m11_ = value;
  // @@protoc_insertion_point(field_set:tergeo.map.proto.Affine.m11)
}

// optional double m12 = 2;
inline bool Affine::has_m12() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Affine::set_has_m12() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Affine::clear_has_m12() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Affine::clear_m12() {
  m12_ = 0;
  clear_has_m12();
}
inline double Affine::m12() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Affine.m12)
  return m12_;
}
inline void Affine::set_m12(double value) {
  set_has_m12();
  m12_ = value;
  // @@protoc_insertion_point(field_set:tergeo.map.proto.Affine.m12)
}

// optional double m13 = 3;
inline bool Affine::has_m13() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Affine::set_has_m13() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Affine::clear_has_m13() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Affine::clear_m13() {
  m13_ = 0;
  clear_has_m13();
}
inline double Affine::m13() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Affine.m13)
  return m13_;
}
inline void Affine::set_m13(double value) {
  set_has_m13();
  m13_ = value;
  // @@protoc_insertion_point(field_set:tergeo.map.proto.Affine.m13)
}

// optional double m21 = 4;
inline bool Affine::has_m21() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Affine::set_has_m21() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Affine::clear_has_m21() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Affine::clear_m21() {
  m21_ = 0;
  clear_has_m21();
}
inline double Affine::m21() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Affine.m21)
  return m21_;
}
inline void Affine::set_m21(double value) {
  set_has_m21();
  m21_ = value;
  // @@protoc_insertion_point(field_set:tergeo.map.proto.Affine.m21)
}

// optional double m22 = 5;
inline bool Affine::has_m22() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Affine::set_has_m22() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Affine::clear_has_m22() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Affine::clear_m22() {
  m22_ = 0;
  clear_has_m22();
}
inline double Affine::m22() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Affine.m22)
  return m22_;
}
inline void Affine::set_m22(double value) {
  set_has_m22();
  m22_ = value;
  // @@protoc_insertion_point(field_set:tergeo.map.proto.Affine.m22)
}

// optional double m23 = 6;
inline bool Affine::has_m23() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Affine::set_has_m23() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Affine::clear_has_m23() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Affine::clear_m23() {
  m23_ = 0;
  clear_has_m23();
}
inline double Affine::m23() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Affine.m23)
  return m23_;
}
inline void Affine::set_m23(double value) {
  set_has_m23();
  m23_ = value;
  // @@protoc_insertion_point(field_set:tergeo.map.proto.Affine.m23)
}

// -------------------------------------------------------------------

// Raster

// optional .tergeo.map.proto.Affine affine = 1;
inline bool Raster::has_affine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Raster::set_has_affine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Raster::clear_has_affine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Raster::clear_affine() {
  if (affine_ != NULL) affine_->::tergeo::map::proto::Affine::Clear();
  clear_has_affine();
}
inline const ::tergeo::map::proto::Affine& Raster::affine() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Raster.affine)
  return affine_ != NULL ? *affine_ : *default_instance_->affine_;
}
inline ::tergeo::map::proto::Affine* Raster::mutable_affine() {
  set_has_affine();
  if (affine_ == NULL) {
    affine_ = new ::tergeo::map::proto::Affine;
  }
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.Raster.affine)
  return affine_;
}
inline ::tergeo::map::proto::Affine* Raster::release_affine() {
  // @@protoc_insertion_point(field_release:tergeo.map.proto.Raster.affine)
  clear_has_affine();
  ::tergeo::map::proto::Affine* temp = affine_;
  affine_ = NULL;
  return temp;
}
inline void Raster::set_allocated_affine(::tergeo::map::proto::Affine* affine) {
  delete affine_;
  affine_ = affine;
  if (affine) {
    set_has_affine();
  } else {
    clear_has_affine();
  }
  // @@protoc_insertion_point(field_set_allocated:tergeo.map.proto.Raster.affine)
}

// optional string image_name = 2;
inline bool Raster::has_image_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Raster::set_has_image_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Raster::clear_has_image_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Raster::clear_image_name() {
  image_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image_name();
}
inline const ::std::string& Raster::image_name() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.Raster.image_name)
  return image_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Raster::set_image_name(const ::std::string& value) {
  set_has_image_name();
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tergeo.map.proto.Raster.image_name)
}
inline void Raster::set_image_name(const char* value) {
  set_has_image_name();
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tergeo.map.proto.Raster.image_name)
}
inline void Raster::set_image_name(const char* value, size_t size) {
  set_has_image_name();
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tergeo.map.proto.Raster.image_name)
}
inline ::std::string* Raster::mutable_image_name() {
  set_has_image_name();
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.Raster.image_name)
  return image_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Raster::release_image_name() {
  // @@protoc_insertion_point(field_release:tergeo.map.proto.Raster.image_name)
  clear_has_image_name();
  return image_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Raster::set_allocated_image_name(::std::string* image_name) {
  if (image_name != NULL) {
    set_has_image_name();
  } else {
    clear_has_image_name();
  }
  image_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_name);
  // @@protoc_insertion_point(field_set_allocated:tergeo.map.proto.Raster.image_name)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace map
}  // namespace tergeo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tergeo_2fmap_2fproto_2fraster_2eproto__INCLUDED
