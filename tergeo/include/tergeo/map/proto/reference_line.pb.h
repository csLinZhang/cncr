// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tergeo/map/proto/reference_line.proto

#ifndef PROTOBUF_tergeo_2fmap_2fproto_2freference_5fline_2eproto__INCLUDED
#define PROTOBUF_tergeo_2fmap_2fproto_2freference_5fline_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tergeo {
namespace map {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tergeo_2fmap_2fproto_2freference_5fline_2eproto();
void protobuf_AssignDesc_tergeo_2fmap_2fproto_2freference_5fline_2eproto();
void protobuf_ShutdownFile_tergeo_2fmap_2fproto_2freference_5fline_2eproto();

class ReferenceLine;
class ReferencePoint;

enum ActionFlag {
  ACTION_NULL = 0,
  ACTION_STRAIGHT_FORWARD = 1,
  ACTION_TURN_LEFT = 2,
  ACTION_TURN_RIGHT = 4,
  ACTION_U_TURN = 8
};
bool ActionFlag_IsValid(int value);
const ActionFlag ActionFlag_MIN = ACTION_NULL;
const ActionFlag ActionFlag_MAX = ACTION_U_TURN;
const int ActionFlag_ARRAYSIZE = ActionFlag_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActionFlag_descriptor();
inline const ::std::string& ActionFlag_Name(ActionFlag value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActionFlag_descriptor(), value);
}
inline bool ActionFlag_Parse(
    const ::std::string& name, ActionFlag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActionFlag>(
    ActionFlag_descriptor(), name, value);
}
// ===================================================================

class ReferencePoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tergeo.map.proto.ReferencePoint) */ {
 public:
  ReferencePoint();
  virtual ~ReferencePoint();

  ReferencePoint(const ReferencePoint& from);

  inline ReferencePoint& operator=(const ReferencePoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReferencePoint& default_instance();

  void Swap(ReferencePoint* other);

  // implements Message ----------------------------------------------

  inline ReferencePoint* New() const { return New(NULL); }

  ReferencePoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReferencePoint& from);
  void MergeFrom(const ReferencePoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReferencePoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double theta = 3;
  bool has_theta() const;
  void clear_theta();
  static const int kThetaFieldNumber = 3;
  double theta() const;
  void set_theta(double value);

  // optional int64 action = 4;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 4;
  ::google::protobuf::int64 action() const;
  void set_action(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tergeo.map.proto.ReferencePoint)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_theta();
  inline void clear_has_theta();
  inline void set_has_action();
  inline void clear_has_action();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  double theta_;
  ::google::protobuf::int64 action_;
  friend void  protobuf_AddDesc_tergeo_2fmap_2fproto_2freference_5fline_2eproto();
  friend void protobuf_AssignDesc_tergeo_2fmap_2fproto_2freference_5fline_2eproto();
  friend void protobuf_ShutdownFile_tergeo_2fmap_2fproto_2freference_5fline_2eproto();

  void InitAsDefaultInstance();
  static ReferencePoint* default_instance_;
};
// -------------------------------------------------------------------

class ReferenceLine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tergeo.map.proto.ReferenceLine) */ {
 public:
  ReferenceLine();
  virtual ~ReferenceLine();

  ReferenceLine(const ReferenceLine& from);

  inline ReferenceLine& operator=(const ReferenceLine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReferenceLine& default_instance();

  void Swap(ReferenceLine* other);

  // implements Message ----------------------------------------------

  inline ReferenceLine* New() const { return New(NULL); }

  ReferenceLine* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReferenceLine& from);
  void MergeFrom(const ReferenceLine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReferenceLine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tergeo.map.proto.ReferencePoint point = 1;
  int point_size() const;
  void clear_point();
  static const int kPointFieldNumber = 1;
  const ::tergeo::map::proto::ReferencePoint& point(int index) const;
  ::tergeo::map::proto::ReferencePoint* mutable_point(int index);
  ::tergeo::map::proto::ReferencePoint* add_point();
  ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::ReferencePoint >*
      mutable_point();
  const ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::ReferencePoint >&
      point() const;

  // @@protoc_insertion_point(class_scope:tergeo.map.proto.ReferenceLine)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::ReferencePoint > point_;
  friend void  protobuf_AddDesc_tergeo_2fmap_2fproto_2freference_5fline_2eproto();
  friend void protobuf_AssignDesc_tergeo_2fmap_2fproto_2freference_5fline_2eproto();
  friend void protobuf_ShutdownFile_tergeo_2fmap_2fproto_2freference_5fline_2eproto();

  void InitAsDefaultInstance();
  static ReferenceLine* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ReferencePoint

// optional double x = 1;
inline bool ReferencePoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReferencePoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReferencePoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReferencePoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double ReferencePoint::x() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.ReferencePoint.x)
  return x_;
}
inline void ReferencePoint::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:tergeo.map.proto.ReferencePoint.x)
}

// optional double y = 2;
inline bool ReferencePoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReferencePoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReferencePoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReferencePoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double ReferencePoint::y() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.ReferencePoint.y)
  return y_;
}
inline void ReferencePoint::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:tergeo.map.proto.ReferencePoint.y)
}

// optional double theta = 3;
inline bool ReferencePoint::has_theta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReferencePoint::set_has_theta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReferencePoint::clear_has_theta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReferencePoint::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
inline double ReferencePoint::theta() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.ReferencePoint.theta)
  return theta_;
}
inline void ReferencePoint::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:tergeo.map.proto.ReferencePoint.theta)
}

// optional int64 action = 4;
inline bool ReferencePoint::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReferencePoint::set_has_action() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReferencePoint::clear_has_action() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReferencePoint::clear_action() {
  action_ = GOOGLE_LONGLONG(0);
  clear_has_action();
}
inline ::google::protobuf::int64 ReferencePoint::action() const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.ReferencePoint.action)
  return action_;
}
inline void ReferencePoint::set_action(::google::protobuf::int64 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:tergeo.map.proto.ReferencePoint.action)
}

// -------------------------------------------------------------------

// ReferenceLine

// repeated .tergeo.map.proto.ReferencePoint point = 1;
inline int ReferenceLine::point_size() const {
  return point_.size();
}
inline void ReferenceLine::clear_point() {
  point_.Clear();
}
inline const ::tergeo::map::proto::ReferencePoint& ReferenceLine::point(int index) const {
  // @@protoc_insertion_point(field_get:tergeo.map.proto.ReferenceLine.point)
  return point_.Get(index);
}
inline ::tergeo::map::proto::ReferencePoint* ReferenceLine::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:tergeo.map.proto.ReferenceLine.point)
  return point_.Mutable(index);
}
inline ::tergeo::map::proto::ReferencePoint* ReferenceLine::add_point() {
  // @@protoc_insertion_point(field_add:tergeo.map.proto.ReferenceLine.point)
  return point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::ReferencePoint >*
ReferenceLine::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:tergeo.map.proto.ReferenceLine.point)
  return &point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tergeo::map::proto::ReferencePoint >&
ReferenceLine::point() const {
  // @@protoc_insertion_point(field_list:tergeo.map.proto.ReferenceLine.point)
  return point_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace map
}  // namespace tergeo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tergeo::map::proto::ActionFlag> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tergeo::map::proto::ActionFlag>() {
  return ::tergeo::map::proto::ActionFlag_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tergeo_2fmap_2fproto_2freference_5fline_2eproto__INCLUDED
