// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tergeo/planning/proto/costmap2d_context_config.proto

#ifndef PROTOBUF_tergeo_2fplanning_2fproto_2fcostmap2d_5fcontext_5fconfig_2eproto__INCLUDED
#define PROTOBUF_tergeo_2fplanning_2fproto_2fcostmap2d_5fcontext_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tergeo {
namespace planning {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tergeo_2fplanning_2fproto_2fcostmap2d_5fcontext_5fconfig_2eproto();
void protobuf_AssignDesc_tergeo_2fplanning_2fproto_2fcostmap2d_5fcontext_5fconfig_2eproto();
void protobuf_ShutdownFile_tergeo_2fplanning_2fproto_2fcostmap2d_5fcontext_5fconfig_2eproto();

class Costmap2DConfig;
class Costmap2DContextConfig;
class Costmap2DLayerConfig;

// ===================================================================

class Costmap2DLayerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tergeo.planning.proto.Costmap2DLayerConfig) */ {
 public:
  Costmap2DLayerConfig();
  virtual ~Costmap2DLayerConfig();

  Costmap2DLayerConfig(const Costmap2DLayerConfig& from);

  inline Costmap2DLayerConfig& operator=(const Costmap2DLayerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Costmap2DLayerConfig& default_instance();

  void Swap(Costmap2DLayerConfig* other);

  // implements Message ----------------------------------------------

  inline Costmap2DLayerConfig* New() const { return New(NULL); }

  Costmap2DLayerConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Costmap2DLayerConfig& from);
  void MergeFrom(const Costmap2DLayerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Costmap2DLayerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 prior = 1;
  bool has_prior() const;
  void clear_prior();
  static const int kPriorFieldNumber = 1;
  ::google::protobuf::int64 prior() const;
  void set_prior(::google::protobuf::int64 value);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string config = 3;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 3;
  const ::std::string& config() const;
  void set_config(const ::std::string& value);
  void set_config(const char* value);
  void set_config(const char* value, size_t size);
  ::std::string* mutable_config();
  ::std::string* release_config();
  void set_allocated_config(::std::string* config);

  // optional bool enable = 4;
  bool has_enable() const;
  void clear_enable();
  static const int kEnableFieldNumber = 4;
  bool enable() const;
  void set_enable(bool value);

  // @@protoc_insertion_point(class_scope:tergeo.planning.proto.Costmap2DLayerConfig)
 private:
  inline void set_has_prior();
  inline void clear_has_prior();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_config();
  inline void clear_has_config();
  inline void set_has_enable();
  inline void clear_has_enable();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 prior_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr config_;
  bool enable_;
  friend void  protobuf_AddDesc_tergeo_2fplanning_2fproto_2fcostmap2d_5fcontext_5fconfig_2eproto();
  friend void protobuf_AssignDesc_tergeo_2fplanning_2fproto_2fcostmap2d_5fcontext_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_tergeo_2fplanning_2fproto_2fcostmap2d_5fcontext_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static Costmap2DLayerConfig* default_instance_;
};
// -------------------------------------------------------------------

class Costmap2DConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tergeo.planning.proto.Costmap2DConfig) */ {
 public:
  Costmap2DConfig();
  virtual ~Costmap2DConfig();

  Costmap2DConfig(const Costmap2DConfig& from);

  inline Costmap2DConfig& operator=(const Costmap2DConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Costmap2DConfig& default_instance();

  void Swap(Costmap2DConfig* other);

  // implements Message ----------------------------------------------

  inline Costmap2DConfig* New() const { return New(NULL); }

  Costmap2DConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Costmap2DConfig& from);
  void MergeFrom(const Costmap2DConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Costmap2DConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 width = 1;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::int64 width() const;
  void set_width(::google::protobuf::int64 value);

  // optional int64 height = 2;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int64 height() const;
  void set_height(::google::protobuf::int64 value);

  // optional double resolution = 3;
  bool has_resolution() const;
  void clear_resolution();
  static const int kResolutionFieldNumber = 3;
  double resolution() const;
  void set_resolution(double value);

  // optional int64 default_value = 4;
  bool has_default_value() const;
  void clear_default_value();
  static const int kDefaultValueFieldNumber = 4;
  ::google::protobuf::int64 default_value() const;
  void set_default_value(::google::protobuf::int64 value);

  // repeated .tergeo.planning.proto.Costmap2DLayerConfig layer = 5;
  int layer_size() const;
  void clear_layer();
  static const int kLayerFieldNumber = 5;
  const ::tergeo::planning::proto::Costmap2DLayerConfig& layer(int index) const;
  ::tergeo::planning::proto::Costmap2DLayerConfig* mutable_layer(int index);
  ::tergeo::planning::proto::Costmap2DLayerConfig* add_layer();
  ::google::protobuf::RepeatedPtrField< ::tergeo::planning::proto::Costmap2DLayerConfig >*
      mutable_layer();
  const ::google::protobuf::RepeatedPtrField< ::tergeo::planning::proto::Costmap2DLayerConfig >&
      layer() const;

  // @@protoc_insertion_point(class_scope:tergeo.planning.proto.Costmap2DConfig)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_resolution();
  inline void clear_has_resolution();
  inline void set_has_default_value();
  inline void clear_has_default_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 width_;
  ::google::protobuf::int64 height_;
  double resolution_;
  ::google::protobuf::int64 default_value_;
  ::google::protobuf::RepeatedPtrField< ::tergeo::planning::proto::Costmap2DLayerConfig > layer_;
  friend void  protobuf_AddDesc_tergeo_2fplanning_2fproto_2fcostmap2d_5fcontext_5fconfig_2eproto();
  friend void protobuf_AssignDesc_tergeo_2fplanning_2fproto_2fcostmap2d_5fcontext_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_tergeo_2fplanning_2fproto_2fcostmap2d_5fcontext_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static Costmap2DConfig* default_instance_;
};
// -------------------------------------------------------------------

class Costmap2DContextConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tergeo.planning.proto.Costmap2DContextConfig) */ {
 public:
  Costmap2DContextConfig();
  virtual ~Costmap2DContextConfig();

  Costmap2DContextConfig(const Costmap2DContextConfig& from);

  inline Costmap2DContextConfig& operator=(const Costmap2DContextConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Costmap2DContextConfig& default_instance();

  void Swap(Costmap2DContextConfig* other);

  // implements Message ----------------------------------------------

  inline Costmap2DContextConfig* New() const { return New(NULL); }

  Costmap2DContextConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Costmap2DContextConfig& from);
  void MergeFrom(const Costmap2DContextConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Costmap2DContextConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tergeo.planning.proto.Costmap2DConfig local_costmap = 1;
  bool has_local_costmap() const;
  void clear_local_costmap();
  static const int kLocalCostmapFieldNumber = 1;
  const ::tergeo::planning::proto::Costmap2DConfig& local_costmap() const;
  ::tergeo::planning::proto::Costmap2DConfig* mutable_local_costmap();
  ::tergeo::planning::proto::Costmap2DConfig* release_local_costmap();
  void set_allocated_local_costmap(::tergeo::planning::proto::Costmap2DConfig* local_costmap);

  // optional .tergeo.planning.proto.Costmap2DConfig global_costmap = 2;
  bool has_global_costmap() const;
  void clear_global_costmap();
  static const int kGlobalCostmapFieldNumber = 2;
  const ::tergeo::planning::proto::Costmap2DConfig& global_costmap() const;
  ::tergeo::planning::proto::Costmap2DConfig* mutable_global_costmap();
  ::tergeo::planning::proto::Costmap2DConfig* release_global_costmap();
  void set_allocated_global_costmap(::tergeo::planning::proto::Costmap2DConfig* global_costmap);

  // @@protoc_insertion_point(class_scope:tergeo.planning.proto.Costmap2DContextConfig)
 private:
  inline void set_has_local_costmap();
  inline void clear_has_local_costmap();
  inline void set_has_global_costmap();
  inline void clear_has_global_costmap();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::tergeo::planning::proto::Costmap2DConfig* local_costmap_;
  ::tergeo::planning::proto::Costmap2DConfig* global_costmap_;
  friend void  protobuf_AddDesc_tergeo_2fplanning_2fproto_2fcostmap2d_5fcontext_5fconfig_2eproto();
  friend void protobuf_AssignDesc_tergeo_2fplanning_2fproto_2fcostmap2d_5fcontext_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_tergeo_2fplanning_2fproto_2fcostmap2d_5fcontext_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static Costmap2DContextConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Costmap2DLayerConfig

// optional int64 prior = 1;
inline bool Costmap2DLayerConfig::has_prior() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Costmap2DLayerConfig::set_has_prior() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Costmap2DLayerConfig::clear_has_prior() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Costmap2DLayerConfig::clear_prior() {
  prior_ = GOOGLE_LONGLONG(0);
  clear_has_prior();
}
inline ::google::protobuf::int64 Costmap2DLayerConfig::prior() const {
  // @@protoc_insertion_point(field_get:tergeo.planning.proto.Costmap2DLayerConfig.prior)
  return prior_;
}
inline void Costmap2DLayerConfig::set_prior(::google::protobuf::int64 value) {
  set_has_prior();
  prior_ = value;
  // @@protoc_insertion_point(field_set:tergeo.planning.proto.Costmap2DLayerConfig.prior)
}

// optional string name = 2;
inline bool Costmap2DLayerConfig::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Costmap2DLayerConfig::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Costmap2DLayerConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Costmap2DLayerConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Costmap2DLayerConfig::name() const {
  // @@protoc_insertion_point(field_get:tergeo.planning.proto.Costmap2DLayerConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Costmap2DLayerConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tergeo.planning.proto.Costmap2DLayerConfig.name)
}
inline void Costmap2DLayerConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tergeo.planning.proto.Costmap2DLayerConfig.name)
}
inline void Costmap2DLayerConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tergeo.planning.proto.Costmap2DLayerConfig.name)
}
inline ::std::string* Costmap2DLayerConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:tergeo.planning.proto.Costmap2DLayerConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Costmap2DLayerConfig::release_name() {
  // @@protoc_insertion_point(field_release:tergeo.planning.proto.Costmap2DLayerConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Costmap2DLayerConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tergeo.planning.proto.Costmap2DLayerConfig.name)
}

// optional string config = 3;
inline bool Costmap2DLayerConfig::has_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Costmap2DLayerConfig::set_has_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Costmap2DLayerConfig::clear_has_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Costmap2DLayerConfig::clear_config() {
  config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_config();
}
inline const ::std::string& Costmap2DLayerConfig::config() const {
  // @@protoc_insertion_point(field_get:tergeo.planning.proto.Costmap2DLayerConfig.config)
  return config_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Costmap2DLayerConfig::set_config(const ::std::string& value) {
  set_has_config();
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tergeo.planning.proto.Costmap2DLayerConfig.config)
}
inline void Costmap2DLayerConfig::set_config(const char* value) {
  set_has_config();
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tergeo.planning.proto.Costmap2DLayerConfig.config)
}
inline void Costmap2DLayerConfig::set_config(const char* value, size_t size) {
  set_has_config();
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tergeo.planning.proto.Costmap2DLayerConfig.config)
}
inline ::std::string* Costmap2DLayerConfig::mutable_config() {
  set_has_config();
  // @@protoc_insertion_point(field_mutable:tergeo.planning.proto.Costmap2DLayerConfig.config)
  return config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Costmap2DLayerConfig::release_config() {
  // @@protoc_insertion_point(field_release:tergeo.planning.proto.Costmap2DLayerConfig.config)
  clear_has_config();
  return config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Costmap2DLayerConfig::set_allocated_config(::std::string* config) {
  if (config != NULL) {
    set_has_config();
  } else {
    clear_has_config();
  }
  config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config);
  // @@protoc_insertion_point(field_set_allocated:tergeo.planning.proto.Costmap2DLayerConfig.config)
}

// optional bool enable = 4;
inline bool Costmap2DLayerConfig::has_enable() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Costmap2DLayerConfig::set_has_enable() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Costmap2DLayerConfig::clear_has_enable() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Costmap2DLayerConfig::clear_enable() {
  enable_ = false;
  clear_has_enable();
}
inline bool Costmap2DLayerConfig::enable() const {
  // @@protoc_insertion_point(field_get:tergeo.planning.proto.Costmap2DLayerConfig.enable)
  return enable_;
}
inline void Costmap2DLayerConfig::set_enable(bool value) {
  set_has_enable();
  enable_ = value;
  // @@protoc_insertion_point(field_set:tergeo.planning.proto.Costmap2DLayerConfig.enable)
}

// -------------------------------------------------------------------

// Costmap2DConfig

// optional int64 width = 1;
inline bool Costmap2DConfig::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Costmap2DConfig::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Costmap2DConfig::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Costmap2DConfig::clear_width() {
  width_ = GOOGLE_LONGLONG(0);
  clear_has_width();
}
inline ::google::protobuf::int64 Costmap2DConfig::width() const {
  // @@protoc_insertion_point(field_get:tergeo.planning.proto.Costmap2DConfig.width)
  return width_;
}
inline void Costmap2DConfig::set_width(::google::protobuf::int64 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:tergeo.planning.proto.Costmap2DConfig.width)
}

// optional int64 height = 2;
inline bool Costmap2DConfig::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Costmap2DConfig::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Costmap2DConfig::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Costmap2DConfig::clear_height() {
  height_ = GOOGLE_LONGLONG(0);
  clear_has_height();
}
inline ::google::protobuf::int64 Costmap2DConfig::height() const {
  // @@protoc_insertion_point(field_get:tergeo.planning.proto.Costmap2DConfig.height)
  return height_;
}
inline void Costmap2DConfig::set_height(::google::protobuf::int64 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:tergeo.planning.proto.Costmap2DConfig.height)
}

// optional double resolution = 3;
inline bool Costmap2DConfig::has_resolution() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Costmap2DConfig::set_has_resolution() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Costmap2DConfig::clear_has_resolution() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Costmap2DConfig::clear_resolution() {
  resolution_ = 0;
  clear_has_resolution();
}
inline double Costmap2DConfig::resolution() const {
  // @@protoc_insertion_point(field_get:tergeo.planning.proto.Costmap2DConfig.resolution)
  return resolution_;
}
inline void Costmap2DConfig::set_resolution(double value) {
  set_has_resolution();
  resolution_ = value;
  // @@protoc_insertion_point(field_set:tergeo.planning.proto.Costmap2DConfig.resolution)
}

// optional int64 default_value = 4;
inline bool Costmap2DConfig::has_default_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Costmap2DConfig::set_has_default_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Costmap2DConfig::clear_has_default_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Costmap2DConfig::clear_default_value() {
  default_value_ = GOOGLE_LONGLONG(0);
  clear_has_default_value();
}
inline ::google::protobuf::int64 Costmap2DConfig::default_value() const {
  // @@protoc_insertion_point(field_get:tergeo.planning.proto.Costmap2DConfig.default_value)
  return default_value_;
}
inline void Costmap2DConfig::set_default_value(::google::protobuf::int64 value) {
  set_has_default_value();
  default_value_ = value;
  // @@protoc_insertion_point(field_set:tergeo.planning.proto.Costmap2DConfig.default_value)
}

// repeated .tergeo.planning.proto.Costmap2DLayerConfig layer = 5;
inline int Costmap2DConfig::layer_size() const {
  return layer_.size();
}
inline void Costmap2DConfig::clear_layer() {
  layer_.Clear();
}
inline const ::tergeo::planning::proto::Costmap2DLayerConfig& Costmap2DConfig::layer(int index) const {
  // @@protoc_insertion_point(field_get:tergeo.planning.proto.Costmap2DConfig.layer)
  return layer_.Get(index);
}
inline ::tergeo::planning::proto::Costmap2DLayerConfig* Costmap2DConfig::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:tergeo.planning.proto.Costmap2DConfig.layer)
  return layer_.Mutable(index);
}
inline ::tergeo::planning::proto::Costmap2DLayerConfig* Costmap2DConfig::add_layer() {
  // @@protoc_insertion_point(field_add:tergeo.planning.proto.Costmap2DConfig.layer)
  return layer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tergeo::planning::proto::Costmap2DLayerConfig >*
Costmap2DConfig::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:tergeo.planning.proto.Costmap2DConfig.layer)
  return &layer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tergeo::planning::proto::Costmap2DLayerConfig >&
Costmap2DConfig::layer() const {
  // @@protoc_insertion_point(field_list:tergeo.planning.proto.Costmap2DConfig.layer)
  return layer_;
}

// -------------------------------------------------------------------

// Costmap2DContextConfig

// optional .tergeo.planning.proto.Costmap2DConfig local_costmap = 1;
inline bool Costmap2DContextConfig::has_local_costmap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Costmap2DContextConfig::set_has_local_costmap() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Costmap2DContextConfig::clear_has_local_costmap() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Costmap2DContextConfig::clear_local_costmap() {
  if (local_costmap_ != NULL) local_costmap_->::tergeo::planning::proto::Costmap2DConfig::Clear();
  clear_has_local_costmap();
}
inline const ::tergeo::planning::proto::Costmap2DConfig& Costmap2DContextConfig::local_costmap() const {
  // @@protoc_insertion_point(field_get:tergeo.planning.proto.Costmap2DContextConfig.local_costmap)
  return local_costmap_ != NULL ? *local_costmap_ : *default_instance_->local_costmap_;
}
inline ::tergeo::planning::proto::Costmap2DConfig* Costmap2DContextConfig::mutable_local_costmap() {
  set_has_local_costmap();
  if (local_costmap_ == NULL) {
    local_costmap_ = new ::tergeo::planning::proto::Costmap2DConfig;
  }
  // @@protoc_insertion_point(field_mutable:tergeo.planning.proto.Costmap2DContextConfig.local_costmap)
  return local_costmap_;
}
inline ::tergeo::planning::proto::Costmap2DConfig* Costmap2DContextConfig::release_local_costmap() {
  // @@protoc_insertion_point(field_release:tergeo.planning.proto.Costmap2DContextConfig.local_costmap)
  clear_has_local_costmap();
  ::tergeo::planning::proto::Costmap2DConfig* temp = local_costmap_;
  local_costmap_ = NULL;
  return temp;
}
inline void Costmap2DContextConfig::set_allocated_local_costmap(::tergeo::planning::proto::Costmap2DConfig* local_costmap) {
  delete local_costmap_;
  local_costmap_ = local_costmap;
  if (local_costmap) {
    set_has_local_costmap();
  } else {
    clear_has_local_costmap();
  }
  // @@protoc_insertion_point(field_set_allocated:tergeo.planning.proto.Costmap2DContextConfig.local_costmap)
}

// optional .tergeo.planning.proto.Costmap2DConfig global_costmap = 2;
inline bool Costmap2DContextConfig::has_global_costmap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Costmap2DContextConfig::set_has_global_costmap() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Costmap2DContextConfig::clear_has_global_costmap() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Costmap2DContextConfig::clear_global_costmap() {
  if (global_costmap_ != NULL) global_costmap_->::tergeo::planning::proto::Costmap2DConfig::Clear();
  clear_has_global_costmap();
}
inline const ::tergeo::planning::proto::Costmap2DConfig& Costmap2DContextConfig::global_costmap() const {
  // @@protoc_insertion_point(field_get:tergeo.planning.proto.Costmap2DContextConfig.global_costmap)
  return global_costmap_ != NULL ? *global_costmap_ : *default_instance_->global_costmap_;
}
inline ::tergeo::planning::proto::Costmap2DConfig* Costmap2DContextConfig::mutable_global_costmap() {
  set_has_global_costmap();
  if (global_costmap_ == NULL) {
    global_costmap_ = new ::tergeo::planning::proto::Costmap2DConfig;
  }
  // @@protoc_insertion_point(field_mutable:tergeo.planning.proto.Costmap2DContextConfig.global_costmap)
  return global_costmap_;
}
inline ::tergeo::planning::proto::Costmap2DConfig* Costmap2DContextConfig::release_global_costmap() {
  // @@protoc_insertion_point(field_release:tergeo.planning.proto.Costmap2DContextConfig.global_costmap)
  clear_has_global_costmap();
  ::tergeo::planning::proto::Costmap2DConfig* temp = global_costmap_;
  global_costmap_ = NULL;
  return temp;
}
inline void Costmap2DContextConfig::set_allocated_global_costmap(::tergeo::planning::proto::Costmap2DConfig* global_costmap) {
  delete global_costmap_;
  global_costmap_ = global_costmap;
  if (global_costmap) {
    set_has_global_costmap();
  } else {
    clear_has_global_costmap();
  }
  // @@protoc_insertion_point(field_set_allocated:tergeo.planning.proto.Costmap2DContextConfig.global_costmap)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace planning
}  // namespace tergeo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tergeo_2fplanning_2fproto_2fcostmap2d_5fcontext_5fconfig_2eproto__INCLUDED
